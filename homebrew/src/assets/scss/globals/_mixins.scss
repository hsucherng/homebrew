//-----------------------------------------------------------------------------
//  General Mixins
//-----------------------------------------------------------------------------

//
// Usage:
//     - @include transition(width);
//     - @include transition((width, height));
//     - @include transition((width, height), 0.6s);
//     - @include transition((width, height), 0.6s, $easeInQuad);
//
@mixin transition($props, $duration: $transition-duration, $easing: $transition-easing) {
    @if(type-of($props) == list) {
        transition: none $duration $easing;
        transition-property: $props;
    } @else {
        transition: $props $duration $easing;
    }
}



@mixin placeholders() {
   &::-webkit-input-placeholder { @content; }
       &::-ms-input-placeholder { @content; }
        &:-ms-input-placeholder { @content; }
            &::-moz-placeholder { @content; }
             &:-moz-placeholder { @content; }
}


//
// Assuming our variable is as below:
//
//     $media-queries: (
//         xs-dn: (min-width: 480px),
//         md-up: (min-width: 801px)
//     );
//
// We can use the media mixin as below:
//
//     - @include media(xs-dn) { ... }
//          - `xs-dn` is the key name inside the $media-queries list.
//
//     - @include media('(min-width: 569px)') { ... }
//          - This is how we can declare a media query that doesn't exist
//            in the $media-queries list. This is mainly so that we can combine
//            custom queries with preset ones (see further below). If we're 
//            just declaring a single unique media query, then it's recommended
//            NOT to use the mixin, and just stick to the original @media syntax.
//
//     - @include media(xs-dn, md-up) { ... }
//          - This is how we can declare multiple media queries for
//            the same block. This will result in `@media (max-width: 480px),
//            (min-width: 801px) { ... }`.
//
//     - @include media(xs-dn, '(min-width: 569px)') { ... }
//          - While declaring multiple media queries, we can mix in both
//            preset and custom queries. This will result in `@media
//            (max-width: 480px), (min-width: 569px) { ... }`.
//
@mixin media($breakpoints...) {
    $query: '';

    @each $breakpoint in $breakpoints {
        @if $query != '' {
            $query: $query + ', ';
        }

        @if map-has-key($media-queries, $breakpoint) {
            $query: $query + map-get($media-queries, $breakpoint);
        } @else {
            $query: $query + $breakpoint;
        }
    }

    @media #{$query} {
        @content;
    }
}


//
//@mixin clearfix() {
//    &:after {
//        content: ' ';
//        display: table;
//        clear: both;
//    }
//}
//

//
//@mixin ellipsis() {
//    overflow: hidden;
//    text-overflow: ellipsis;
//    white-space: nowrap;
//}
//

//
//@mixin justify() {
//    text-align: justify;
//
//    &:after {
//        content: '';
//        width: 100%;
//        height: 0;
//        display: inline-block;
//    }
//}